// Test file for pipeline operators in Keen
// This will help identify what works and what needs fixing with pipeline syntax

// Helper functions for pipeline testing
add(x, y) = x + y
multiply(x, y) = x * y
double(x) = x * 2
increment(x) = x + 1
square(x) = x * x
subtract(x, y) = x - y
divide(x, y) = x / y
to_lowercase(s) = s
replace(s, old, new) = s
append(s, suffix) = s
capitalize(s) = s
trim(s) = s
reverse(s) = s
to_string(x) = x
to_uppercase(s) = s
length(s) = 10
sum(arr) = 100
round(x) = x
round_to(x, digits) = x
map(arr, func) = arr
filter(arr, func) = arr
reduce(arr, func, init) = init
sort(arr) = arr
collect(arr) = arr
validate(x) = x
process(x) = x
format(x) = x
save(x) = x
transform(x) = x
normalize(x) = x
validate_input(x) = x
transform_data(x) = x

// Simple pipeline operations
simple_pipeline = 5
    |> double
    |> increment

// Pipeline with function calls
function_pipeline = 10
    |> add(5)
    |> multiply(3)
    |> square

// Pipeline with lambda expressions
lambda_pipeline = 7
    |> |x| x * 2
    |> |x| x + 10
    |> |x| x / 2

// Multi-step data processing pipeline
process_data = |numbers| numbers
    |> filter(|x| x > 0)
    |> map(|x| x * 2)
    |> reduce(|acc, x| acc + x, 0)

// Pipeline with method chaining
chain_pipeline = "hello world"
    |> capitalize
    |> trim
    |> reverse

// Pipeline starting with literal
literal_pipeline = 100
    |> subtract(25)
    |> divide(5)
    |> add(3)

// Pipeline with function composition
compose_test = 42
    |> double
    |> square
    |> increment
    |> double

// Complex pipeline with branching logic
