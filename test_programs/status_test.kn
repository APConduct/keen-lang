// Keen Language Status Test
// Comprehensive test to show what features are currently working

// =============================================================================
// BASIC FUNCTIONS (✅ WORKING)
// =============================================================================

// Simple arithmetic functions
add(a, b) = a + b
subtract(a, b) = a - b
multiply(a, b) = a * b
divide(a, b) = a / b
modulo(a, b) = a % b

// Simple utility functions
double(x) = x * 2
square(x) = x * x
increment(x) = x + 1

// =============================================================================
// GLOBAL VARIABLES (✅ WORKING)
// =============================================================================

x = 10
y = 20
pi = 3.14159
name = "Keen"
is_active = true

// =============================================================================
// VARIABLE ASSIGNMENTS WITH FUNCTION CALLS (✅ FIXED!)
// =============================================================================

// These should now work correctly
sum = add(x, y)                    // 30
product = multiply(x, y)           // 200
doubled_x = double(x)              // 20
squared_y = square(y)              // 400

// Nested function calls
complex_calc = add(multiply(x, 2), divide(y, 5))  // 24

// =============================================================================
// FUNCTIONS WITH BLOCK BODIES (✅ WORKING)
// =============================================================================

calculate_area(width, height) {
    area = multiply(width, height)
    perimeter = multiply(add(width, height), 2)
    area
}

process_number(n) {
    doubled = double(n)
    incremented = increment(doubled)
    final = add(incremented, 10)
    final
}

// Function using globals
combine_globals() {
    result = add(x, y)
    doubled_result = double(result)
    doubled_result
}

// =============================================================================
// MODULO OPERATOR (✅ WORKING)
// =============================================================================

test_modulo() = modulo(17, 5)  // Should return 2

// =============================================================================
// BASIC EXPRESSIONS (✅ WORKING)
// =============================================================================

test_arithmetic() {
    a = 15
    b = 3

    sum_val = add(a, b)        // 18
    diff_val = subtract(a, b)  // 12
    prod_val = multiply(a, b)  // 45
    div_val = divide(a, b)     // 5
    mod_val = modulo(a, b)     // 0

    // Return combined result
    add(sum_val, add(diff_val, add(prod_val, add(div_val, mod_val))))
}

// =============================================================================
// MAIN TEST FUNCTION
// =============================================================================

main() {
    // Test variable assignments with function calls
    result1 = sum                    // 30
    result2 = product               // 200
    result3 = doubled_x             // 20
    result4 = squared_y             // 400

    // Test function with block body
    area_result = calculate_area(5, 8)  // 40

    // Test number processing
    processed = process_number(3)   // ((3*2)+1)+10 = 17

    // Test globals combination
    globals_result = combine_globals()  // (10+20)*2 = 60

    // Test modulo
    mod_result = test_modulo()      // 2

    // Test arithmetic expressions
    arith_result = test_arithmetic() // 80

    // Combine all results for verification
    final_result = add(result1, add(result2, add(result3, add(result4, area_result))))

    // Should return: 30 + 200 + 20 + 400 + 40 = 690
    final_result
}

// =============================================================================
// ADDITIONAL WORKING FEATURES
// =============================================================================

// Simple comparison functions
is_positive(n) = n > 0
is_equal(a, b) = a == b
max_of_two(a, b) = a > b ? a : b

// Test ternary operator (basic)
test_ternary() {
    value = 15
    result = value > 10 ? 100 : 50
    result
}

// =============================================================================
// SUMMARY OF WORKING FEATURES
// =============================================================================

/*
✅ CONFIRMED WORKING:
1. Basic function definitions (expression and block bodies)
2. Global variables accessible in functions
3. Variable assignments with function calls (FIXED!)
4. All arithmetic operators including modulo (%)
5. Function calls with proper argument passing
6. Block expressions with implicit returns
7. Basic ternary operators
8. Comparison operators
9. Boolean literals and operations

🔄 PARTIALLY WORKING:
1. String interpolation (basic parsing, runtime needs work)
2. Collection literals (parsing works, runtime allocation simplified)
3. Lambda expressions (basic syntax, execution needs improvement)

❌ NOT YET WORKING:
1. Advanced pattern matching (case/when expressions)
2. Pipeline operators (|>)
3. Method chaining (.method())
4. Constructor expressions with named arguments
5. Complex string interpolation with expressions
6. Advanced lambda features (closures, captures)

NEXT PRIORITIES:
1. Complete string interpolation runtime
2. Improve collection literal memory allocation
3. Fix lambda expression execution
4. Add pattern matching support
5. Implement pipeline operators
*/

// Test function to verify the status
verify_status() {
    // All these should work now:
    basic_add = add(5, 3)           // 8
    basic_multiply = multiply(4, 6) // 24
    basic_block = calculate_area(3, 4) // 12
    basic_modulo = modulo(10, 3)    // 1

    // Return sum to verify all operations work
    add(basic_add, add(basic_multiply, add(basic_block, basic_modulo))) // 45
}
