// Working Pipeline Test - Only uses implemented features
// This tests pipeline operators with features that actually work

// Helper functions for testing
double(x) = x * 2
increment(x) = x + 1
square(x) = x * x
add_ten(x) = x + 10
multiply_by_three(x) = x * 3

// Simple pipeline with single functions
simple_test = 5
    |> double
    |> increment

// Pipeline with arithmetic
arithmetic_test = 10
    |> double
    |> add_ten
    |> square

// Pipeline in function definition
process_value(n) = n
    |> increment
    |> double

// Pipeline with multiple steps
multi_step = 3
    |> double
    |> increment
    |> square
    |> add_ten

// Pipeline starting from variable
test_variable() = {
    base = 7
    result = base
        |> double
        |> increment
        |> square
    result
}

// Pipeline with function calls (simple)
function_call_test = 15
    |> double
    |> multiply_by_three

// Main function to test all pipelines
main() = {
    // Test simple pipeline: 5 |> double |> increment = (5 * 2) + 1 = 11
    result1 = simple_test

    // Test arithmetic: 10 |> double |> add_ten |> square = ((10 * 2) + 10)^2 = 30^2 = 900
    result2 = arithmetic_test

    // Test function: 5 |> increment |> double = (5 + 1) * 2 = 12
    result3 = process_value(5)

    // Test multi-step: 3 |> double |> increment |> square |> add_ten
    // = ((3 * 2) + 1)^2 + 10 = (7)^2 + 10 = 49 + 10 = 59
    result4 = multi_step

    // Test variable pipeline
    result5 = test_variable()

    // Test function calls: 15 |> double |> multiply_by_three = (15 * 2) * 3 = 90
    result6 = function_call_test

    // Simple addition of all results
    final_result = result1 + result2 + result3 + result4 + result5 + result6
    final_result
}

// Additional simple pipeline tests
chain_operations(x) = x
    |> double
    |> increment

nested_test() = {
    value = 4
    processed = value |> double |> square
    processed
}

// Test with expressions in pipeline
expression_test = 2 + 3
    |> double
    |> increment

// Test pipeline assignment
assign_test() = {
    x = 6
    y = x |> double
    z = y |> increment
    z
}
