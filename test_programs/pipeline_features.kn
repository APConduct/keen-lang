// Test for newly implemented pipeline features
// Tests pipelines with function arguments, basic lists, and lambda expressions

// Helper functions
add(x, y) = x + y
multiply(x, y) = x * y
double(x) = x * 2
increment(x) = x + 1
square(x) = x * x

// Test 1: Pipeline with function arguments
test_function_args() = {
    // 10 |> add(5) should become add(10, 5) = 15
    result1 = 10 |> add(5)

    // 20 |> multiply(3) should become multiply(20, 3) = 60
    result2 = 20 |> multiply(3)

    result1 + result2
}

// Test 2: Basic list literals
test_lists() = {
    // Simple list creation
    numbers = [1, 2, 3, 4, 5]
    empty_list = []

    // Lists should return their length for now
    numbers + empty_list
}

// Test 3: Lambda expressions in pipelines
test_lambdas() = {
    // Simple lambda: 5 |> |x| x * 2 = 10
    result1 = 5 |> |x| x * 2

    // Lambda with addition: 10 |> |x| x + 5 = 15
    result2 = 10 |> |x| x + 5

    // Lambda with complex expression: 3 |> |x| x * x + 1 = 10
    result3 = 3 |> |x| x * x + 1

    result1 + result2 + result3
}

// Test 4: Mixed pipeline operations
test_mixed() = {
    // Combine function calls and lambdas
    result = 2
        |> double        // 4
        |> |x| x + 3     // 7
        |> multiply(2)   // multiply(7, 2) = 14
        |> |x| x - 1     // 13

    result
}

// Test 5: Basic higher-order functions (mocked)
test_higher_order() = {
    numbers = [1, 2, 3, 4, 5]

    // These should work with our basic implementations
    filtered = numbers |> filter(|x| x > 2)
    mapped = numbers |> map(|x| x * 2)
    collected = mapped |> collect

    // Should return the list or mock values
    filtered + mapped + collected
}

// Test 6: String operations (basic)
test_strings() = {
    text = "hello"

    // Basic string pipeline
    result = text
        |> to_uppercase
        |> length

    result
}

// Test 7: Chained function arguments
test_chained_args() = {
    // Test multiple function calls with arguments
    result = 5
        |> add(3)        // add(5, 3) = 8
        |> multiply(2)   // multiply(8, 2) = 16
        |> add(4)        // add(16, 4) = 20

    result
}

// Test 8: Lambdas with arithmetic
test_lambda_arithmetic() = {
    base = 6

    // Test various lambda expressions
    doubled = base |> |x| x * 2           // 12
    squared = base |> |x| x * x           // 36
    incremented = base |> |x| x + 1       // 7
    complex = base |> |x| x * 2 + x       // 18

    doubled + squared + incremented + complex
}

// Main test function
main() = {
    // Run all tests
    test1 = test_function_args()    // Should be 75 (15 + 60)
    test2 = test_lists()            // Should be 5 (list length)
    test3 = test_lambdas()          // Should be 35 (10 + 15 + 10)
    test4 = test_mixed()            // Should be 13
    test5 = test_higher_order()     // Mock values (depends on implementation)
    test6 = test_strings()          // Should be 42 (mock length)
    test7 = test_chained_args()     // Should be 20
    test8 = test_lambda_arithmetic() // Should be 73 (12 + 36 + 7 + 18)

    // Sum all results
    total = test1 + test2 + test3 + test4 + test6 + test7 + test8
    total
}

// Simple standalone tests
simple_pipeline = 7 |> double |> increment
function_arg_pipeline = 12 |> add(8)
lambda_pipeline = 4 |> |x| x * 3
