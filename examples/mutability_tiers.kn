// keep - immutable and non-shadowable constants
keep PI = 3.14159
keep MAX_CONNECTIONS = 100
keep VERSION = “1.0.0”

// Default - immutable but shadowable (functional style)
data = load_file(“input.txt”)
data = data
    |> parse_json
    |> validate_schema
    |> transform_records

// live - explicitly mutable
live cache = {}
live connection_count = 0
live current_user = None

// Usage examples
process_request() {
    // This works - shadowing immutable with chaining
    request = get_request()
        .add_timestamp()
        .sanitize_input()

    // This works - mutating live variable
    connection_count = connection_count + 1

    when connection_count {
        > MAX_CONNECTIONS -> {
            print("Connection limit reached: {connection_count}/{MAX_CONNECTIONS}")
            reject_request()  // Using keep constant
        }
        _ -> {
            cache.insert(request.id, request)  // Mutating live cache
            print("Processing request {request.id}, connections: {connection_count}")
            handle_request(request)
        }
    }

}

// Errors that would be caught:
// PI = 3.14                    // Error: cannot reassign 'keep' variable
// MAX_CONNECTIONS = 200        // Error: cannot shadow 'keep' variable
// data = "new value"           // OK - regular shadowing allowed
// cache = {}                   // OK - live variables can be reassigned

// Examples with string interpolation
debug_status = || {
    print("System status: PI={PI}, MAX_CONNECTIONS={MAX_CONNECTIONS}")
    print("Current connections: {connection_count}")
    print("Cache size: {cache.size()}")
}
