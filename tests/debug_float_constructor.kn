// Test just float literals in constructors to isolate the verifier error
// This tests if float literals in constructor arguments are causing the issue

// Union type with float field
type Shape = Circle(radius: Float) | Rectangle(width: Float, height: Float)

// Test 1: Constructor with integer (should work)
circle_int = Circle(radius: 5)

// Test 2: Constructor with float literal (might cause verifier error)
circle_float = Circle(radius: 5.0)

// Test 3: Rectangle with float literals
rectangle_float = Rectangle(width: 10.0, height: 8.0)

// Test 4: Function that creates shape with float
create_circle(): Shape = {
    Circle(radius: 3.14)
}

// Test 5: Function that takes Shape parameter but doesn't pattern match
get_shape_id(shape: Shape): Int = {
    42  // Just return a constant, don't pattern match
}

// Test 6: Variables with float constructors
pi_circle: Shape = Circle(radius: 3.14159)
test_rect: Shape = Rectangle(width: 2.5, height: 4.7)

// Main function
main(): Int = {
    // Test creating shapes with float literals
    test_circle1 = create_circle()

    // Test function calls with float constructor shapes
    result1 = get_shape_id(circle_float)
    result2 = get_shape_id(rectangle_float)
    result3 = get_shape_id(pi_circle)

    // Return success
    result1 + result2 + result3
}
