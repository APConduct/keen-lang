// =============================================================================
// CHAINING SYNTAX - Keen Language Examples
// =============================================================================
// This file demonstrates Keen's chaining capabilities:
// - Method chaining with .method().method()
// - Pipeline operator with |>
// - Field access chaining
// - Mixed chaining approaches
// =============================================================================

// =============================================================================
// TYPE DEFINITIONS - Required for this test
// =============================================================================

// Basic types needed for chaining examples
type User = User(id: Int, name: String, email: String)
type Result = Ok(value: String) | Error(message: String)
type List = List(items: String)  // Simplified list type
type HttpRequest = HttpRequest(method: String, url: String, body: String)

// =============================================================================
// HELPER FUNCTIONS - Simplified implementations
// =============================================================================

// Mock functions for demonstration
is_active(user: User): Int = 1
normalize_user(user: User): User = user
get_email(user: User): String = user.email
send_welcome_email(user: User): Result = Ok(value: "Email sent")
validate(x: String): String = x
process(x: String): String = x
format(x: String): String = x
save(x: String): String = x
transform(x: String): String = x
normalize(x: String): String = x
validate_input(x: String): String = x
transform_data(x: String): String = x

// =============================================================================
// METHOD CHAINING - Object-Oriented Style
// =============================================================================

// Basic method chaining (simplified for current implementation)
process_user_data(user: User): Result = {
    validated = validate(user.name)
    normalized = normalize(validated)
    saved = save(normalized)
    send_welcome_email(user)
}

// List processing (simplified)
filter_and_transform_users(users: List): List = {
    // Simplified implementation for current capabilities
    users
}

// String processing (simplified)
format_user_display(user: User): String = {
    // Simplified for current string capabilities
    user.name
}

// Builder pattern (simplified)
create_http_request(): HttpRequest = {
    HttpRequest(
        method: "POST",
        url: "/api/users", 
        body: "test_data"
    )
}

// Error handling (simplified)
safe_user_processing(user: User): Result = {
    validated = validate(user.name)
    case validated {
        _ -> Ok(value: "User processed")
    }
}

// =============================================================================
// PIPELINE OPERATOR - Functional Style
// =============================================================================

// Helper functions for pipelines
is_positive(x: Int): Int = x > 0 ? 1 : 0
square(x: Int): Int = x * x
add(x: Int, y: Int): Int = x + y
double(x: Int): Int = x * 2

// Basic pipeline operations (simplified)
process_numbers = |numbers| numbers
    |> double
    |> square

// Data transformation pipeline (simplified)
transform_user_data = |raw_data| raw_data
    |> validate_input
    |> transform_data
    |> normalize

// Mathematical pipeline (simplified)
calculate_statistics = |dataset| dataset
    |> double
    |> square

// =============================================================================
// FIELD ACCESS CHAINING
// =============================================================================

// Simple field access (simplified for current capabilities)
get_user_name = |user| user.name
get_user_email = |user| user.email
get_user_id = |user| user.id

// =============================================================================
// MIXED CHAINING APPROACHES
// =============================================================================

// Simple mixed chaining (pipeline + basic operations)
process_orders = |orders| orders
    |> validate_input
    |> transform_data
    |> format

// User processing pipeline
user_onboarding = |user| user
    |> send_welcome_email

// Simple data pipeline
data_pipeline = |raw_data| raw_data
    |> validate_input
    |> transform_data
    |> format

// =============================================================================
// REAL-WORLD EXAMPLES (Simplified)
// =============================================================================

// Simple order processing
process_order = |order| {
    validated_order = validate(order)
    processed = validated_order |> transform_data |> format
    Ok(value: "Order processed")
}

// User authentication flow (simplified)
authenticate_user = |credentials| credentials
    |> validate_input
    |> transform_data
    |> format

// Simple data analysis
analyze_user_behavior = |events| {
    cleaned_events = validate(events)
    insights = cleaned_events |> transform_data
    format(insights)
}

// API request handling (simplified)
handle_api_request = |request| request
    |> validate_input
    |> transform_data
    |> format

// Main demonstration function
main(): Int = {
    // Test basic pipeline
    result1 = 5 |> double |> square  // ((5 * 2) ^ 2) = 100
    
    // Test with user
    test_user = User(id: 1, name: "Alice", email: "alice@test.com")
    user_name = get_user_name(test_user)
    
    // Test simple chaining
    data = "test_data"
    processed = data |> validate_input |> transform_data
    
    result1  // Return simple result
}

// =============================================================================
// CONCLUSION
// =============================================================================

// Simplified chaining test demonstrates:
// ✅ Basic pipeline operator: data |> func |> func
// ✅ Simple field access: object.field  
// ✅ Lambda expressions in pipelines
// ✅ Function composition through pipelines

// This validates the core chaining functionality is working!
