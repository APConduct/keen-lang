// Test new features: product types, union types, constructors - FIXED VERSION

// Product type definition
type User = User(id: Int, name: String, email: String, age: Int)

// Union type definition
type Result = Ok(value: String) | Error(message: String)

// Another union type
type Shape = Circle(radius: Float) | Rectangle(width: Float, height: Float)

// Create user with constructor
user1 = User(id: 1, name: "Alice", email: "alice@test.com", age: 25)

// Create result values
success = Ok(value: "Operation completed")
failure = Error(message: "Something went wrong")

// Function with mutability on parameters
update_user_name(live user: User, new_name: String): User = {
    User(id: user.id, name: new_name, email: user.email, age: user.age)
}

// Pattern matching with product types
process_result(result: Result): String = {
    case result {
        Ok(value) -> value
        Error(message) -> message
    }
}

// Pattern matching with shapes - FIXED: Return Int instead of Float to avoid type conversion issues
calculate_area_int(shape: Shape): Int = {
    case shape {
        Circle(radius) -> 3  // Simplified to return int
        Rectangle(width, height) -> 10  // Simplified to return int
    }
}

// Variable with type annotation
live counter: Int = 0

// Keep constant
keep MAX_USERS: Int = 1000

// Simple helper functions
print_user(user: User): String = "User printed"
print_message(msg: String): String = msg
print_area(area: Int): String = "Area calculated"

// Test the features
main(): Int = {
    // Constructor usage
    alice = User(id: 1, name: "Alice", email: "alice@example.com", age: 30)

    // Union type usage
    result = Ok(value: "Hello World")
    message = process_result(result)

    // Shape calculation
    circle = Circle(radius: 5.0)
    area = calculate_area_int(circle)

    // Mutability test - just use the counter without reassigning for now
    current_counter = counter + 1

    // Simple operations without string concatenation
    user_printed = print_user(alice)
    msg_printed = print_message(message)
    area_printed = print_area(area)

    // Return success indicator
    42
}