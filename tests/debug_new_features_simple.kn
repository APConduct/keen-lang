// Simplified version of new_features.kn to isolate the verifier error
// Removing features one by one to find the real culprit

// Product type definition
type User = User(id: Int, name: String, email: String, age: Int)

// Union type definition
type Result = Ok(value: String) | Error(message: String)

// Another union type
type Shape = Circle(radius: Float) | Rectangle(width: Float, height: Float)

// Function with mutability on parameters - THIS MIGHT BE THE ISSUE
update_user_name(live user: User, new_name: String): User {
    User(id: user.id, name: new_name, email: user.email, age: user.age)
}

// Pattern matching with product types
process_result(result: Result): Int {
    case result {
        Ok(value) -> 1
        Error(message) -> 0
    }
}

// Pattern matching with shapes
calculate_area(shape: Shape): Float {
    case shape {
        Circle(radius) -> 3.14159 * radius * radius
        Rectangle(width, height) -> width * height
    }
}

// Variable with type annotation
live counter: Int = 0

// Keep constant
keep MAX_USERS = 1000

// Main function - simplified without problematic features
main(): Int = {
    // Constructor usage
    alice = User(id: 1, name: "Alice", email: "alice@example.com", age: 30)

    // Union type usage
    result = Ok(value: "Hello World")
    message = process_result(result)

    // Shape calculation
    circle = Circle(radius: 5.0)
    area = calculate_area(circle)

    // Mutability test
    counter = counter + 1

    // Return without problematic print statements
    counter
}
