// Test with pattern matching to isolate the verifier error
// This adds pattern matching back to see if that's the issue

// Product type definition
type User = User(id: Int, name: String, email: String, age: Int)

// Union type definition
type Result = Ok(value: String) | Error(message: String)

// Another union type
type Shape = Circle(radius: Float) | Rectangle(width: Float, height: Float)

// Create user with constructor
user1 = User(id: 1, name: "Alice", email: "alice@test.com", age: 25)

// Create result values
success = Ok(value: "Operation completed")
failure = Error(message: "Something went wrong")

// Function WITHOUT field access (this should work)
update_user_simple(live user: User, new_name: String): User {
    User(id: 1, name: new_name, email: "test@example.com", age: 30)
}

// Pattern matching with product types
process_result(result: Result) {
    case result {
        Ok(value) -> {
            print("Success: " + value)
            value
        }
        Error(message) -> {
            print("Error: " + message)
            ""
        }
    }
}

// Pattern matching with shapes
calculate_area(shape: Shape) {
    case shape {
        Circle(radius) -> 3.14159 * radius * radius
        Rectangle(width, height) -> width * height
    }
}

// Variable with type annotation
live counter: Int = 0

// Keep constant
keep MAX_USERS = 1000

// Test the features with pattern matching but NO field access in constructors
main() {
    // Constructor usage
    alice = User(id: 1, name: "Alice", email: "alice@example.com", age: 30)

    // Union type usage
    result = Ok(value: "Hello World")
    message = process_result(result)

    // Shape calculation with float literal
    circle = Circle(radius: 5.0)
    area = calculate_area(circle)

    // Simple user update (no field access)
    updated_user = update_user_simple(alice, "Bob")

    // Mutability test
    counter = counter + 1

    // Return simple result
    counter
}
