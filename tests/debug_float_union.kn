// Test Float literals in union constructors to isolate verifier error
// This tests if the issue is with Float values in union type constructors

// Union type with Float fields
type Shape = Circle(radius: Float) | Rectangle(width: Float, height: Float)

// Test 1: Create union with integer (this should work)
circle_int = Circle(radius: 5)

// Test 2: Create union with float literal (this might cause verifier error!)
circle_float = Circle(radius: 5.0)

// Test 3: Rectangle with float literals
rect_float = Rectangle(width: 10.0, height: 8.0)

// Test 4: Function that creates union with float
create_circle(): Shape = {
    Circle(radius: 3.14)
}

// Test 5: Function that pattern matches on float union
get_area(shape: Shape): Float = {
    case shape {
        Circle(radius) -> 3.14159 * radius * radius
        Rectangle(width, height) -> width * height
    }
}

// Test 6: Mixed int and float operations
test_mixed(): Float = {
    circle = Circle(radius: 2.5)
    area = get_area(circle)
    area
}

// Main function
main(): Int = {
    // Test creating unions with floats
    test_circle = create_circle()
    test_area = test_mixed()

    // Test pattern matching
    result_area = get_area(circle_float)

    // Return success (convert float to int for now)
    42
}
