// Test pattern matching with float constructors to isolate the verifier error
// This tests if pattern matching on float-based constructors causes the issue

// Union type with float field
type Shape = Circle(radius: Float) | Rectangle(width: Float, height: Float)

// Test function with pattern matching on float-based constructors
calculate_area(shape: Shape): Float = {
    case shape {
        Circle(radius) -> 3.14159 * radius * radius
        Rectangle(width, height) -> width * height
    }
}

// Test function with simpler pattern matching (just checking type)
get_shape_type(shape: Shape): Int = {
    case shape {
        Circle(_) -> 1
        Rectangle(_, _) -> 2
    }
}

// Test function with pattern matching but no float arithmetic
identify_shape(shape: Shape): Int = {
    case shape {
        Circle(radius) -> 100  // Just return constants
        Rectangle(width, height) -> 200
    }
}

// Main function
main(): Int = {
    // Create shapes with float literals
    circle = Circle(radius: 5.0)
    rectangle = Rectangle(width: 10.0, height: 8.0)

    // Test pattern matching (this might cause the verifier error)
    area1 = calculate_area(circle)
    area2 = calculate_area(rectangle)

    // Test simpler pattern matching
    type1 = get_shape_type(circle)
    type2 = get_shape_type(rectangle)

    // Test pattern matching without float arithmetic
    id1 = identify_shape(circle)
    id2 = identify_shape(rectangle)

    // Return success (convert floats to int for now)
    type1 + type2 + id1 + id2
}
